<project name="distro.build" default="build" basedir="./" xmlns:antcontrib="antlib:net.sf.antcontrib">

	<loadproperties srcfile="build.properties"/>
	<import file="${cfdistro.build.file}"/>

	<property name="deploy.quiet" value="true"/>
	<property name="site.suffix" value="-dev"/>
	<property name="generator.suffix" value="I"/>
	<property name="merge.updates" value="false"/>
    <property name="remote.cfeclipse.sites.dir" value="from.cfeclipse.properties"/>
    <property name="remote.p2.dir" value="${remote.sites.dir}/mxunit/update${site.suffix}"/>
	<property name="plugin.p2.dir" location="${dist.dir}/update${site.suffix}"/>
	<property name="sign" value="false"/>
	
	<target name="mxunit-ant.getversion">
		<loadfile srcFile="${src.dir}/mxunit-ant/org/mxunit/ant/MXUnitAntTask.java" property="mxunit-ant.version"/>
		<antcontrib:propertyregex override="yes" property="mxunit-ant.version" input="${mxunit-ant.version}" 
			regexp=".*?version\s?=\s?&quot;([^&quot;]+).*?" select="\1" />
		<echo message="mxunit-ant version: ${mxunit-ant.version}" />
	</target>

	<target name="build" depends="cfdistro.build, src.to.mappings.xml, set.mappings">
		<loadproperties prefix="mxb" srcfile="${src.dir}/mxunit/buildprops/version.properties"/>
	   	<antcontrib:var name="mxunit.version" value="${mxb.build.major}.${mxb.build.minor}.${mxb.build.buildnum}" />
	   	<echo message="mxunit version: ${mxunit.version}" />
		<zip destfile="${dist.dir}/mxunit.zip" basedir="${src.dir}/mxunit" includes="framework/** runner/**" />
		<zip destfile="${dist.dir}/mxunit-all.zip" basedir="${src.dir}/mxunit" includes="**" />
		<antcontrib:var name="runwar.port" value="0" />
		<antcontrib:var name="runwar.stop.socket" value="0" />
		<server-run>
			<ant inheritAll="false" antfile="build.xml" dir="${src.dir}/mxunit-ant/">
			  <property name="server.port.http" value="${server.port.http}"/>
			</ant>
		</server-run>
	</target>

	<target name="build.eclipse">
		<abspath property="src.dir" path="${src.dir}" />
		<abspath property="dist.dir" path="${dist.dir}" />
		<delete dir="${plugin.p2.dir}"/>
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${plugin.p2.dir}"/>
 		<maven-run basedir="${src.dir}/../"
             options="-Dplugin.p2.dir=${plugin.p2.dir} -Dbuild.type=${build.type} -Dsite.suffix=${site.suffix} -Dsign=${sign} -Dmerge.updates=${merge.updates}"
             goal="clean verify"
             resultproperty="maven.build.result"/>
         <echo message="${maven.build.result}" />
         <antcontrib:runtarget target="p2.html" />
	</target>
	<target name="p2.html">
		<echo file="${temp.dir}/p2files.txt"><![CDATA[<table cellspacing="0" cellpadding="0"><tr><td colspan="2" style="border-top:0px; padding-top:3px;padding-left:8px;"><em>Files</em></td></tr>]]>
		</echo>
		<antcontrib:for param="file">
			<path><fileset dir="${plugin.p2.dir}" includes="**/*.jar"/></path>
			<sequential>
				<antcontrib:propertyregex override="yes" property="p2file" input="@{file}" regexp=".*?${plugin.p2.dir}\/?(.+)" replace="\1"/>
 				<echo file="${temp.dir}/p2files.txt" append="true"><![CDATA[<tr><td valign="top" style="padding:5px"><a href="${p2file}">${p2file}</a></td><td valign="top" style="padding:5px"></td></tr>]]>
				</echo>
			</sequential>
	  	</antcontrib:for>
		<echo file="${temp.dir}/p2files.txt" append="true"><![CDATA[</table>]]></echo>
		<loadfile srcfile="${temp.dir}/p2files.txt" property="p2files.table" />
		<copy file="${src.dir}/org.mxunit.eclipseplugin.update${site.suffix}/index.html" todir="${plugin.p2.dir}">
		    <filterchain><expandproperties /></filterchain>
		</copy>
		<replaceregexp file="${plugin.p2.dir}/index.html"
		match='(?s)&lt;div id="data"&gt;.*?&lt;\/div&gt;'
		replace='&lt;div id="data"&gt;${line.separator}${p2files.table}${line.separator}&lt;\/div&gt;' byline="false" />
		<delete dir="${temp.dir}" />		
	</target>
	
    <target name="build.and.scp" depends="build.eclipse">
        <antcontrib:var name="remote" value="cfeclipse"/>
        <cfdistro.setremote />
        <echo message="scp update site"/>
        <deploy-scp toDir="${remote.user}@${remote.host}:${remote.p2.dir}" fromdir="${plugin.p2.dir}">
            <scpfiles>
                <fileset dir="${plugin.p2.dir}">
                    <include name="**/*"/>
                </fileset>
            </scpfiles>
        </deploy-scp>
    </target>
    
	<target name="build.mvn.release" depends="project.update, build.mxunit.tests.run, mxunit-ant.getversion">
		<!-- 
	   	<property name="release.repo.user" value="admin" />
	   	<property name="release.repo.password" value="admin123" />
	   	<property name="release.repo.url" value="admin123" />
	    <mvn-repo id="release.repo" url="http://127.0.0.1:8081/nexus/content/repositories/releases">
	    	<authentication>
	    		<authentication username="${release.repo.user}" password="${release.repo.password}"/>
    		</authentication>
	    </mvn-repo>

		<property name="target.repo.id" value="release.repo" />
		<property name="target.repo.id" value="loganberry.repo" />
		 -->
		<property name="target.repo.id" value="cfdistro.repo.local" />

		<mvn-put artifact="${dist.dir}/mxunit.zip" packaging="zip" repoId="${target.repo.id}"
		 groupId="org.mxunit" artifactId="core" version="${mxunit.version}"/>

		<mvn-put artifact="${dist.dir}/mxunit-all.zip" packaging="zip" repoId="${target.repo.id}"
		 groupId="org.mxunit" artifactId="mxunit" version="${mxunit.version}" />
		
		<!--  create an extension -->
	    <delete dir="${basedir}/extensionbase/" />
	    <mkdir dir="${basedir}/extensionbase/" />
		<copy todir="${basedir}/extensionbase/applications/mxunit">
			<fileset dir="${src.dir}/mxunit" />
		</copy>
		<property name="extension.label" value="MXUnit ${mxunit.version}" />
		<antcontrib:runtarget target="extension.build" />

		<!-- add the extension as well -->
		<mvn-put artifact="${extension.dist}/${extension.archive}" packaging="zip" repoId="${target.repo.id}"
		 groupId="cfml.extension" artifactId="mxunit" version="${extension.version}" />

	    <delete dir="${basedir}/extensionbase/" />

		<mvn-put artifact="${src.dir}/mxunit-ant/dist/mxunit-ant.jar" packaging="jar" repoId="${target.repo.id}"
		 groupId="org.mxunit" artifactId="mxunit-ant" version="${mxunit-ant.version}"/>

	</target>	
	
</project>